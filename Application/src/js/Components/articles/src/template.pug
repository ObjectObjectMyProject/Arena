section.articles
    .home-trainers__title.text-center
        h2 Статьи
    .articles-wrap
        .container
            .row
                article.articles-item(style="background-image:url('../../img/art1.jpg')")
                    a(href='#').articles-item__link
                        h2.articles-item__title Заголовок статьи!
                        p.articles-item__text Отличительной особенностью API selenium-webdriver является то, что большинство методов выполняются асинхронно. Однако, постоянно использоваться promise-объекты, чтобы обеспечить нужный порядок выполнения команд, вовсе не требуется. Для этого есть так называемые “control flow”. Внутри одного потока все команды будут исполняться синхронно по мере того как они были добавлены в поток. Это немного облегчает написание тестов. Но, если нужно получить значение из функции (например, список элементов, размеры элемента и т.д.), то без “обещаний” не обойтись.
                    time.articles-item__date(datetime="2001-05-15 19:00") 15 мая
                    .articles-item__category
                        .articles-item__new
                            include ../../../../img/svg/store-new-badges.svg
                        .articles-item__hot
                            include ../../../../img/svg/fire.svg
                article.articles-item(style="background-image:url('../../img/art2.jpg')")
                    a(href='#').articles-item__link
                        h2.articles-item__title Заголовок статьи!
                        p.articles-item__text Отличительной особенностью API selenium-webdriver является то, что большинство методов выполняются асинхронно. Однако, постоянно использоваться promise-объекты, чтобы обеспечить нужный порядок выполнения команд, вовсе не требуется. Для этого есть так называемые “control flow”. Внутри одного потока все команды будут исполняться синхронно по мере того как они были добавлены в поток. Это немного облегчает написание тестов. Но, если нужно получить значение из функции (например, список элементов, размеры элемента и т.д.), то без “обещаний” не обойтись.
                    .articles-item__new
                    .articles-item__hot
                article.articles-item(style="background-image:url('../../img/art3.jpg')")
                    a(href='#').articles-item__link
                        h2.articles-item__title Заголовок статьи!
                        p.articles-item__text Отличительной особенностью API selenium-webdriver является то, что большинство методов выполняются асинхронно. Однако, постоянно использоваться promise-объекты, чтобы обеспечить нужный порядок выполнения команд, вовсе не требуется. Для этого есть так называемые “control flow”. Внутри одного потока все команды будут исполняться синхронно по мере того как они были добавлены в поток. Это немного облегчает написание тестов. Но, если нужно получить значение из функции (например, список элементов, размеры элемента и т.д.), то без “обещаний” не обойтись.
                    .articles-item__new
                    .articles-item__hot
                article.articles-item(style="background-image:url('../../img/art4.jpg')")
                    a(href='#').articles-item__link
                        h2.articles-item__title Заголовок статьи!
                        p.articles-item__text Отличительной особенностью API selenium-webdriver является то, что большинство методов выполняются асинхронно. Однако, постоянно использоваться promise-объекты, чтобы обеспечить нужный порядок выполнения команд, вовсе не требуется. Для этого есть так называемые “control flow”. Внутри одного потока все команды будут исполняться синхронно по мере того как они были добавлены в поток. Это немного облегчает написание тестов. Но, если нужно получить значение из функции (например, список элементов, размеры элемента и т.д.), то без “обещаний” не обойтись.
                    .articles-item__new
                    .articles-item__hot
